Инструкция по установке Docker в Ubuntu:
----------------------------------------
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-ru

docker ps // запущенные контейнеры
docker ps -a // посмотреть все контейнеры
docker images // информация о локальных образах
docker search nginx // поиск доступных для выгрузки образов nginx
docker info // сводная информация о докере (клиенте и сервере)
docker --version    // версия докера

docker exec -it container_name /bin/bash     // подключиться к контейнеру докера с именем docker exec -it rabbitmq /bin/bash

docker build .    // создание образа
docker build -t my-php-app ./php
docker remove f8d98930dba2
docker run CONTAINER_ID    // запуск контейнера
docker stop CONTAINER_ID    // остановка контейнера
docker run -d -p 81:80 docker/getting-started
docker run -p 8001:80 -d my-php-app
docker run -p 3001:8001 58fd12bf809f
docker image rm 58fd12bf809f
docker pull rabbitmq:3.11.0-management // Скачать образ rabbitmq
docker volume create rabbitmq_data // Создать volume

docker context list или docker context ls // посмотреть существующие контексты
docker context use desktop-linux // использовать контекст desktop-linux (этот контекст использует docker-desktop)

docker-compose build
docker-compose up
docker-compose up -d // создание и запуск контейнера в фоновом detached режиме

service docker restart // перезапуск сервиса докер

Созданные контейнеры лежат здесь:
---------------------------------
/var/snap/docker/common/var-lib-docker/containers/
или здесь
/var/lib/docker/containers/


------------------------------------------------------------------------
docker-compose.yml
------------------

version: '3.1'

services:
  php:
    build: ./php
    ports:
      - 8081:80

  db:
    image: mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 12345

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1

------------------------------------------------------------------------
/php/Dockerfile
---------------
FROM php:7.2-apache
WORKDIR /var/www/html
COPY . /var/www/html
EXPOSE 80

------------------------------------------------------------------------


Установка RabbitMQ в докере:
----------------------------
Скачать образ rabbitmq:
$ docker pull rabbitmq:3.11.0-management

Создать volume:
$ docker volume create rabbitmq_data

Запустить контейнер с rabbitmq:
$ docker run -d --hostname rabbitmq --name rabbitmq -p 5672:5672 -p 15672:15672 -v rabbitmq_data:/var/lib/rabbitmq --restart=unless-stopped rabbitmq:3.11.0-management
Флаги:
--detach , -d   запустит контейнер в фоновом режиме и вернет идентификатор контейнера в терминал;
--hostname   адрес контейнера для подключения к нему внутри docker из других контейнеров;
--name   имя контейнера;
-p    порты: первый порт — тот, по которому мы будет подключаться снаружи docker, а второй — тот, который используется внутри контейнера;
-v   примонтировать volume (том), т. е. внешнее хранилище данных;
--restart=unless-stopped   контейнер будет подниматься заново при каждом перезапуске системы (точнее, при запуске docker);

Так путь к volume может выглядеть в Windows:
rabbitmq_data:c:\rabbitmq_data

Подключиться к контейнеру с rabbitmq:
$ docker exec -it rabbitmq /bin/bash

Внутри контейнера создать пользователя, сделать его админом и установить права:

$ rabbitmqctl add_user userok p@ssw0rd                       // создание пользователя userok с паролем p@ssw0rd 
$ rabbitmqctl set_user_tags userok administrator             // выдача прав администратора
$ rabbitmqctl set_permissions -p / userok ".*" ".*" ".*"     // выдача разрешений на чтение запись и изменение конфигураций

------------------------------------------------------------------------

Рекомендации по Docker файлам ( https://habr.com/ru/companies/flant/articles/787494/ ):

1. Объединяйте связанные инструкции RUN

RUN download_a_really_big_file && \
         remove_the_really_big_file

Это уменьшает конечный размер образа, поскольку удаляется промежуточный слой с большим файлом, ведь все манипуляции с ним проводятся в рамках одного RUN-выражения. 

2. Явно указывайте версии при установке с apt-get

FROM ubuntu:22.04
RUN apt-get update && \
         apt-get install -y some-package=1.2.*

Это позволяет контролировать, какие именно пакеты устанавливаются в Dockerfile, а также их зависимости.

3. Используйте --no-install-recommends, чтобы избежать установки ненужных пакетов

FROM ubuntu:22.04
RUN apt-get update && \
    apt-get install -y some-package --no-install-recommends

 Указывать флаг --no-install-recommends в apt-get install. Это предотвратит установку рекомендуемых пакетов и уменьшит размер образа.

4. Не используйте кэш при вызове pip install

FROM python:3.11
RUN pip3 install --no-cache-dir mysql-connector-python

Нет никакого смысла кэшировать Pip-пакеты при сборке Docker-образа, поскольку их никто не будет переустанавливать. 
Вместо этого можно использовать кэш Docker-слоя. 
Отключение кэша уменьшает размер конечного образа.

5. Удаляйте списки apt-get после установки пакетов

FROM ubuntu:22.04
RUN apt-get update && \
    apt-get install -y some-package --no-install-recommends && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

Здесь установка пакета объединяется с очисткой кэша apt-get — обе операции проходят в одном атомарном RUN-выражении. 
Это позволяет уменьшить размер конечного образа, удалив из него кэш apt-get, и избежать добавления лишних слоев.

6. Используйте WORKDIR вместо RUN cd some-path

FROM ubuntu:22.04
WORKDIR /usr/src/app
RUN git clone git@github.com:depot/some-repo.git

При смене директорий можно использовать WORKDIR, который запускает shell в указанной директории. 
Единственное исключение — когда нужно сделать что-то в подоболочке. В этом случае придется использовать cd.

7. Явно указывайте версии пакетов при установке через pip

FROM python:3.11
RUN pip3 install --no-cache-dir mysql-connector-python==8.1.0

Если явно указать версию mysql-connector-python, docker build будет вынуждена использовать именно ее независимо от того, что есть в кэше слоя Docker.

8. Используйте нотацию JSON для аргументов CMD и ENTRYPOINT

FROM ubuntu:22.04
ENTRYPOINT ["foo", "run-server"]

FROM ubuntu:22.04
CMD ["foo", "run-server"]

Если использовать JSON-нотацию, исполняемый файл станет PID 1 в контейнере и сможет получать сигналы от ОС. 
Еще пара моментов, на которые следует обратить внимание:

CMD не обрабатывает переменные окружения в shell-формате (например, $FOO_BAR) из-за побочного эффекта, связанного с использованием sh -c в качестве точки входа по умолчанию. 
Так что необходимо самостоятельно обрабатывать переменные окружения вне CMD-выражения.

CMD-выражение парсируется как массив JSON, поэтому для передачи аргументов необходимо использовать двойные кавычки (" ") вместо одинарных (' ').

9. Используйте apt-get или apt-cache вместо apt

FROM ubuntu:22.04
RUN apt-get install -y some-package=1.2.*

apt может по-разному вести себя в дистрибутивах Linux. Поэтому лучше использовать более базовые apt-get или apt-cache.

10. Явно задавайте версии пакетов при установке через apk add

FROM alpine:3.7
RUN apk --no-cache add some-package=~1.2.3

Если версия указана явно, docker build извлечет именно ее независимо от того, что есть в кэше Docker-слоя. 
Следует отметить, что для образов на базе Alpine используется частичная привязка с помощью ~. 
Можно привязать и к конкретной версии, задав ее в виде some-package=1.2.3. 
Однако, если пакет удален, сборка завершится с ошибкой.

