Инструкция по установке Docker в Ubuntu:
----------------------------------------
https://www.digitalocean.com/community/tutorials/how-to-install-and-use-docker-on-ubuntu-20-04-ru

docker ps // запущенные контейнеры
docker ps -a // посмотреть все контейнеры
docker images // информация о локальных образах
docker search nginx // поиск доступных для выгрузки образов nginx
docker info // сводная информация о докере (клиенте и сервере)
docker --version    // версия докера

docker exec -it container_name /bin/bash     // подключиться к контейнеру докера с именем docker exec -it rabbitmq /bin/bash

docker build .    // создание образа
docker build -t my-php-app ./php
docker remove f8d98930dba2
docker run CONTAINER_ID    // запуск контейнера
docker stop CONTAINER_ID    // остановка контейнера
docker run -d -p 81:80 docker/getting-started
docker run -p 8001:80 -d my-php-app
docker run -p 3001:8001 58fd12bf809f
docker image rm 58fd12bf809f
docker pull rabbitmq:3.11.0-management // Скачать образ rabbitmq
docker volume create rabbitmq_data // Создать volume

docker context list или docker context ls // посмотреть существующие контексты
docker context use desktop-linux // использовать контекст desktop-linux (этот контекст использует docker-desktop)

docker-compose build
docker-compose up
docker-compose up -d // создание и запуск контейнера в фоновом detached режиме

service docker restart // перезапуск сервиса докер

Созданные контейнеры лежат здесь:
---------------------------------
/var/snap/docker/common/var-lib-docker/containers/
или здесь
/var/lib/docker/containers/


------------------------------------------------------------------------
docker-compose.yml
------------------

version: '3.1'

services:
  php:
    build: ./php
    ports:
      - 8081:80

  db:
    image: mysql
    restart: always
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: 12345

  phpmyadmin:
    image: phpmyadmin
    restart: always
    ports:
      - 8080:80
    environment:
      - PMA_ARBITRARY=1

------------------------------------------------------------------------
/php/Dockerfile
---------------
FROM php:7.2-apache
WORKDIR /var/www/html
COPY . /var/www/html
EXPOSE 80

------------------------------------------------------------------------


Установка RabbitMQ в докере:
----------------------------
Скачать образ rabbitmq:
$ docker pull rabbitmq:3.11.0-management

Создать volume:
$ docker volume create rabbitmq_data

Запустить контейнер с rabbitmq:
$ docker run -d --hostname rabbitmq --name rabbitmq -p 5672:5672 -p 15672:15672 -v rabbitmq_data:/var/lib/rabbitmq --restart=unless-stopped rabbitmq:3.11.0-management
Флаги:
--detach , -d   запустит контейнер в фоновом режиме и вернет идентификатор контейнера в терминал;
--hostname   адрес контейнера для подключения к нему внутри docker из других контейнеров;
--name   имя контейнера;
-p    порты: первый порт — тот, по которому мы будет подключаться снаружи docker, а второй — тот, который используется внутри контейнера;
-v   примонтировать volume (том), т. е. внешнее хранилище данных;
--restart=unless-stopped   контейнер будет подниматься заново при каждом перезапуске системы (точнее, при запуске docker);

Так путь к volume может выглядеть в Windows:
rabbitmq_data:c:\rabbitmq_data

Подключиться к контейнеру с rabbitmq:
$ docker exec -it rabbitmq /bin/bash

Внутри контейнера создать пользователя, сделать его админом и установить права:

$ rabbitmqctl add_user userok p@ssw0rd                       // создание пользователя userok с паролем p@ssw0rd 
$ rabbitmqctl set_user_tags userok administrator             // выдача прав администратора
$ rabbitmqctl set_permissions -p / userok ".*" ".*" ".*"     // выдача разрешений на чтение запись и изменение конфигураций

------------------------------------------------------------------------
